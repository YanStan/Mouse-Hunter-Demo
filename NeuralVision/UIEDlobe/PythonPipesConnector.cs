using System;
using System.Threading.Tasks;
using System.IO;
using System.IO.Pipes;
using System.Diagnostics;

namespace Mouse_Hunter.NeuralVision.UIEDlobe
{
    public class PythonPipesConnector
    {
        private const string PipeName = "MouseHunter";
        private NamedPipeServerStream PipeStream = new NamedPipeServerStream(PipeName);

        private static PythonPipesConnector instance;

        private PythonPipesConnector() { }
        public static PythonPipesConnector GetInstance()
        {
            if (instance == null)
            {
                instance = new PythonPipesConnector();
            }
            return instance;
        }

        public NamedPipeServerStream ConnectToPUIED()
        {
            //Task.Run(() => RunPythonFromCmd());
            //PipeStream.WaitForConnection();
            return PipeStream;
        }
        public void DisconnectPUIED()
        {
            PipeStream.Disconnect();
            PipeStream.Close();
        }

        private static void RunPythonFromCmd()
        {
            //TODO change on .exe in the end!
            //string path = AppDomain.CurrentDomain.BaseDirectory + "\\..\\..\\..\\pythonUIED\\run_single.exe";
            //Process.Start(path);
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = @"C:\Users\User\AppData\Local\Programs\Python\Python38\python.exe";
            start.Arguments = AppDomain.CurrentDomain.BaseDirectory + @"..\..\GUIEDP\gjuiedcfs.py";
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            start.LoadUserProfile = true;
            using (System.Diagnostics.Process process = System.Diagnostics.Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                    Console.WriteLine("From System Diagnostics");
                    Console.WriteLine(result);
                }
            }
        }
    }
}
